#!/usr/bin/env perl
#
# speedread:  A simple terminal-based open source spritz-alike
#
# Show input text as a per-word RSVP (rapid serial visual presentation)
# aligned on optimal reading points.  This kind of input mode allows
# reading text at a much more rapid pace than usual as the eye can
# stay fixed on a single place.
#
# (c) Petr Baudis <pasky@ucw.cz>  2014
# MIT licence
#
# Usage: cat file.txt | speedread [-w WORDSPERMINUTE] [-r RESUMEPOINT] [-m]
#
# The default of 250 words per minut is very timid, designed so that
# you get used to this.  Be sure to try cranking this up, 500wpm
# should still be fairly easy to follow even for beginners.
#
# speedread can join short words together if you specify the -m switch.
# It did not work well for pasky so far, though.
#
# speedread is slightly interactive, with these controls accepted:
#
#   , or h - slow down by 50 WPM
#   . or l - speed up by 50 WPM
#   space or p - pause or unpause
#   return/enter - unpause
#   o - toggle context mode
#   j - go down by 1 word (i.e. next word)
#   > - go to the next sentence
#   J - go down by 5 words
#   k - go up by 1 words (i.e. previous word)
#   < - go to the beginning of the sentence (or previous sentence if at beginning)
#   K - go up by 5 words
#   q - quit
# 

use warnings;
use strict;
use autodie;
use v5.14;

my $wpm = 250;
my $resume = 0;
my $multiword = 0;
my $min_word = 3;
my $paused = 0;
my $show_context = 0;


use utf8;
binmode(STDIN, ":encoding(UTF-8)");
binmode(STDOUT, ":encoding(UTF-8)");

use List::Util qw( min max );

use Term::ANSIColor;
use POSIX qw(ceil floor);
use Time::HiRes qw(time sleep gettimeofday tv_interval);
my ( $help, $pause_option );

my $HELP_TEXT = color("bold").
"  speedread ".color("reset").": a commandline speedreading application
    ".color("bold").color("green")."h      ".color("reset")."      print help
    ".color("bold").color("green")."w=[val]".color("reset")."      reading speed in words per minute (default: 250 WPM)
    ".color("bold").color("green")."r      ".color("reset")."      resume mode
    ".color("bold").color("green")."p      ".color("reset")."      pause at end of sentences mode
    ".color("bold").color("green")."m      ".color("reset")."      multiword mode (concatenate smaller words)
    ".color("bold").color("green")."n=[val]".color("reset")."      maximum length of words to be concatenated (default: 3)

keyboard shortcuts:
    ".color("bold").color("red").", or h    ".color("reset")."      slow down by 50 WPM
    ".color("bold").color("red").". or l    ".color("reset")."      speed up by 50 WPM
    ".color("bold").color("red")."space or p".color("reset")."      pause
    ".color("bold").color("red")."o         ".color("reset")."      toggle context mode
    ".color("bold").color("red")."j or \<    ".color("reset")."      go down by 1 word (i.e. next word)
    ".color("bold").color("red")."J         ".color("reset")."      go down by 5 words
    ".color("bold").color("red")."n         ".color("reset")."      go down by 10 words
    ".color("bold").color("red")."k or \>    ".color("reset")."      go up by 1 words (i.e. previous word)
    ".color("bold").color("red")."K         ".color("reset")."      go up by 5 words
    ".color("bold").color("red")."m         ".color("reset")."      go up by 10 words
    ".color("bold").color("red")."q         ".color("reset")."      quit
";

# use Getopt::Long;
use Getopt::Long qw(GetOptions);
Getopt::Long::Configure qw(gnu_getopt);
GetOptions("wpm|w=i" => \$wpm,
	   "resume|r=f" => \$resume,
	   "multiword|m" => \$multiword,
	   "min_word|n=i" => \$min_word,
	    'c'     => \$show_context,
	    'P'     => \$paused,
	    'h|help'     => \$help,
	    'p'     => \$pause_option
) or die $HELP_TEXT;


my $wordtime = 0.9; # relative to wpm
my $lentime = 0.04; # * sqrt(length $word), relative to wpm
my $commatime = 2; # relative to wpm
my $fstoptime = 3; # relative to wpm
my $multitime = 1.2; # relative to wpm
my $firsttime = 0.2; # [s]
my $ORPloc = 0.35;
my $ORPmax = 0.2;
my $ORPvisualpos = 80;
my $cursorpos = 90;
my $current_word;
my $current_orp;
my $next_word_time = 0;
my $next_input_time = 0;
my $skipped = 0;
my $context = 0;
my $i = 0;
my $imax = 1;
my @lines;
my $ln;
my @words;
my $wn;
my $flash=0;

my @lastlines;
my $tty = rawinput->new();
$| = 1;

my $wordcounter = 0;
my $lettercounter = 0;
my $t0 = [gettimeofday];
sub print_stats {
	my $elapsed = tv_interval($t0, [gettimeofday]);
	my $truewpm = $wordcounter / $elapsed * 60;
	printf("\n %.2fs, %d words, %d letters, %s%.2f%s true wpm\n",
		$elapsed, $wordcounter, $lettercounter,
		color('bold green'), $truewpm, color('reset'));
}
$SIG{INT} = sub {
	print_stats;
	my $resume_word = $ln + $wn/1000;
	say " To resume from this point run with argument -r $resume_word";
	exit;
};

if ($help) {
	print $HELP_TEXT;
	exit;
}

main();

# ORP: Optical Recognition Point (the red-colored alignment pilot),
# the way Spritz probably does it.
sub find_ORP {
	my ($word, $ORPloc) = @_;
	if (! defined($word)) { $word = "" }

	return 4 if (length($word) > 13);
	return (0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3)[length($word)];
}

sub show_guide {
	my $termwidth = int(`tput cols`);
	# print "<<$termwidth>>";
	$ORPvisualpos = int(($termwidth - 30)/10)*10;
	$cursorpos = int($ORPvisualpos) + 5;
	# Top visual guide
	my ($linenum) = @_;
	my $lindesc=(sprintf("/%2d", $linenum));
	say(
		" "x(int(($ORPvisualpos/2 + 2)))
		. color('red') . "v" . color('reset')
		. " "x(int($ORPvisualpos/2 + 2 + 1))
		. color("grey4") . $lindesc . color("reset")
		. "\033[K");
}

sub get_context {
	my ($wn) = @_;
	my $word=$words[$wn];
	my $len = int(($ORPvisualpos - length($word))/2);
	my $wn0 = join(" ", @words[(max ( 0 , ($wn - 20) )) .. ($wn - 1)]);
	$wn0 = substr($wn0, -($len+1));
	my $wn1 = join(" ", @words[($wn + 1) .. min ( $#words , ($wn + 20) )]);
	$wn1 = substr($wn1, 0, $len-1);
	my $wn0_ = " " x max( 0, $len + 2 - length($wn0));
	my $wn1_ = " " x max( 0, $len - length($wn1) + (length($word)%2) );
	return ($wn0, $wn1, $wn0_, $wn1_, $len);
}

sub show_word {
	my ($word, $i, $wn, $ln) = @_;
	if (! defined($word)) { $word = "" }
	$i = int((length($word)-1)/2);

	my $pivotch = substr($word, $i, 1);
	$pivotch = "Â·" if $pivotch eq ' ';
	my $ln_wn=(sprintf("%2d:%3d", $ln, $wn));
	my $word1;
	if (($i+1) > length($word)) { $word1 = "" }
	else {$word1 = substr($word, $i+1);};
		
	if ($show_context) {
		my ($wn0, $wn1, $wn0_, $wn1_, $len) = get_context($wn);
		print("\r\033[K"
				. $wn0_ . color("grey5") . $wn0 . " "
				. color("white") . color("bold") . substr($word, 0, $i)
				. color("red") . $pivotch . color("reset")
				. color("bold") . $word1 . color("reset")
				. color("grey5") . " " . $wn1 . $wn1_
				. " " x max( 1, ($cursorpos - $len * 2 - length($word) - length("$ln_wn")) )
				. color("reset") . color("grey4") . "$ln_wn " . color("reset")
			    . " $wpm wpm"
			    . (($flash>0) ? "  ".color("red")."!".color("reset") : " ")
			    . ($paused ? "  ".color("yellow")."PAUSED".color("reset") : "")
				)
	} else {
		my $len = int(($ORPvisualpos - length($word))/2);
		print("\r\033[K "
			. " " x (2 + $len)
			. color("bold") . substr($word, 0, $i)
			. color("red") . $pivotch . color("reset")
			. color("bold") . $word1 . color("reset")
			. " " x max(0, ($cursorpos - $len - length($word) - 0 - length("$ln_wn") + 3 - 0*(length($word) % 2) ))
			. color("grey3") . "$ln_wn " . color("reset")
			. " $wpm wpm"
		    . (($flash>0) ? "  ".color("red")."!".color("reset") : " ")
			. ($paused ? "  ".color("yellow")."PAUSED".color("reset") : "")
			);

	}
	if ($flash > 0){ $flash--; };
}

sub word_time {
	my ($word) = @_;
	if (! defined($word)) { $word = "" }

	my $time = $wordtime;
	if ($word =~ /[.?!]\W*$/) {
		$time = $fstoptime;
	} elsif ($word =~ /[:;,]\W*$/) {
		$time = $commatime;
	} elsif ($word =~ / /) {
		$time = $multitime;
	}
	$time += sqrt(length($word)) * $lentime;
	$time *= 60 / $wpm;

	# Give user some time to focus on the first word, even with high wpm.
	$time = $firsttime if ($wordcounter == 0 and $time < $firsttime);

	return $time;
}

sub print_context {
	my ($wn) = @_;
	# Three clear lines for context
	print "\r\033[K\033[A\033[K";
	print "\r\033[K\033[A\033[K";
	print "\r\033[K\033[A\033[K";
	print "\r\033[K\033[A\033[K";

	# Two lines of context #TODO: make variable
	if ($lastlines[2]){ say $lastlines[2]; } else { print "\n"; }
	if ($lastlines[1]){ say $lastlines[1]; } else { print "\n"; }

	# In the final line of context, highlight our word
	my $line0 = $lastlines[0];
	my $c0 = color('yellow');
	my $c1 = color('reset');
	$line0 =~ s/^((?:.*?(?:-|\s)+){$wn})(.*?)(-|\s)/$1$c0$2$c1$3/;
	say $line0;
}

sub print_context_org {
	my ($wn) = @_;
	# Three clear lines for context
	print "\r\033[K\033[A\033[K";
	print "\r\033[K\033[A\033[K";

	# Two lines of context #TODO: make variable
	# say $lastlines[1] if $lastlines[1];

	# In the final line of context, highlight our word
	my $line0 = $lastlines[0];
	my $c0 = color('yellow');
	my $c1 = color('reset');
	$line0 =~ s/^((?:.*?(?:-|\s)+){$wn})(.*?)(-|\s)/$1$c0$2$c1$3/;
	say $line0;
}

sub make_words{
	my ($line) = @_;
	(@words) = split /(?:-|\s)+/, $line;
	if ($multiword) {
		# Join adjecent short words
		for (my $i = 0; $i < $#words - 1; $i++) {
			if (length($words[$i]) <= $min_word and length($words[$i+1]) <= $min_word) {
				# print "\nsplicing\n";
				$words[$i] .= ' ' . $words[$i+1];
				splice(@words, $i+1, 1);
			}
		}
	}
	return @words;
}

sub goPrev {
	# my ($wn, $ln) = @_;
	if ($wn > 0) { $wn--; } elsif ( $ln > 0 ) { $ln--;  @words = make_words($lines[$ln]); $wn=$#words; }
	$current_word = $words[$wn];
	$wordcounter--;
	$lettercounter -= length($current_word);
	return ($wn, $ln, @words);
}


sub goNext {
	# my ($wn, $ln) = @_;
	if ($wn < $#words) { $wn++; } elsif ( $ln < $#lines ) { $ln++;  @words = make_words($lines[$ln]); $wn=0; }
	$current_word = $words[$wn];
	if (! defined($current_word)) { $current_word = "" }
	$wordcounter++;
	$lettercounter += length($current_word);
	return ($wn, $ln, @words);
}


sub main {
	# print "\n";

	$next_word_time = time();
	$next_input_time = time();
	my $line;
	@lines=<>;
	show_guide($#lines);

	for ($ln = 0; $ln <= $#lines; $ln++) {
		if ($ln < ($resume-1)) { next; }
		my $resume_wrd = int(1000*($resume - $ln));
	    $line = $lines[$ln];

		unshift @lastlines, $line;
		@words = make_words($line);

		$wn = -1;
		while ($wn <= $#words) {
			if ($wn < ($resume_wrd-1)) {
				$wn++; next;
				} else { $resume = 0; $resume_wrd = 0; }

			my $current_time = time();

			if ($next_word_time <= $current_time and !$paused) {
				if ($wn < $#words) { $wn++;
					if (($wn == $#words - 1) and ($pause_option)){ $paused = 1; }
					} elsif ( $ln < $#lines ) {
					$ln++; @words = make_words($lines[$ln]); $wn=0;
				}
				$current_word = $words[$wn];
				if (! defined($current_word)) { $current_word = "" }
				$current_orp = find_ORP($current_word, $ORPloc);
				$next_word_time += word_time($current_word);
				$wordcounter++;
				$lettercounter += length($current_word);
			}

			if ($next_input_time <= $current_time) {
				while ($tty->key_pressed()) {
					my $ch = $tty->getch();
					if ($ch eq ',') { $wpm = int($wpm - 50); }
					elsif ($ch eq '.') { $wpm = int($wpm + 50); }
					elsif ($ch eq "\n") { $paused = 0; $next_word_time = time(); }
					elsif ($ch eq "'") {
						$flash=20;
						# my ($wn0, $wn1, $wn0_, $wn1_) = get_context($wn);
						open(my $fd, ">>notes.log") or die;
						# print $fd (sprintf("\n%d:%d\t%s>", $ln, $wn, join(" ", @words[ max(0, $wn - 10) .. min($#words, $wn+10) ])));
						# join(" ", @words[max(0,$wn) .. $wn-1]), 
						print $fd (sprintf("\n[%s]L%d:W%d\t[%s] %s", `date '+%Y%m%d:%H%M' | tr -d '\n'`, $ln, $wn, $words[$wn], join(" ", @words[$wn+1 .. min($#words, $wn+20)])));
						# print $fd (sprintf("\n%d:%d\t%s>", $ln, $wn, (" ".join(@words))));
					}
					elsif ($ch eq ' ' | $ch eq 'p') {
						$paused = not $paused;
						if (not $paused) { $next_word_time = time(); };
					}
					elsif ($ch eq 'c' | $ch eq 'o') {
						if (not $show_context) {
							$show_context = 1;
						} else {
							$show_context = 0;
						}
					}
					elsif ($ch eq '<' or $ch eq 'k' or $ch eq 'K' or $ch eq 'm' or $ch eq ';' or $ch eq '<') {
						$imax = 1;
						if ($ch eq 'K' and $wn > 0) {
							$imax = 5;
							$paused=1;
						}
						if ($ch eq 'm' and $wn > 0) { $imax = 10; }
						if ($ch eq ';' or $ch eq '<') { $imax = max($wn, 1); }
						for($i=1; $i<=$imax; $i++){
							goPrev();
							if ($ch eq '<') {
								if ((length($current_word) > 2 ) and (substr($current_word, -1, 1) eq ".") and ($i > 1)){
									goNext();
									next;
								}
							}
						 }
						$next_word_time += word_time($current_word);
						$current_orp = find_ORP($current_word, $ORPloc);
						}
					elsif ($ch eq '>' or $ch eq 'j' or $ch eq 'J' or $ch eq 'n') {
						$imax = 1;
						if ($ch eq 'J') { $imax = 5; }
						if ($ch eq 'n') { $imax = 10; }
						if ($ch eq '>') { $imax = max($#words - $wn, 1); }
						for($i=1; $i<=$imax; $i++){
							goNext();
							if ($ch eq '>') {
								if ((length($current_word) > 2 ) and (substr($current_word, -1, 1) eq ".")){
									$imax = $i + 1;
								}
							}
						}
						$next_word_time += word_time($current_word);
						$current_orp = find_ORP($current_word, $ORPloc);
					}
					elsif ($ch eq 'l' | $ch eq 'L') {
						$imax = 1;
						if ($ch eq 'L' and $wn > 0) { $imax = 5; }
						for($i=1; $i<=$imax; $i++){
							if ($ln > 0) {
								$wordcounter=$wordcounter-$wn;
								$ln--; @words = make_words($lines[$ln]); $wn=0;
							}
							$current_word = $words[$wn];
							$next_word_time += word_time($current_word);
							$lettercounter -= length($current_word);
						 }
						$current_orp = find_ORP($current_word, $ORPloc);
						}
					elsif ($ch eq 'h' | $ch eq 'H') {
						$imax = 1;
						if ($ch eq 'H') { $imax = 5; }
						for($i=1; $i<=$imax; $i++){
							if ($ln < $#lines-1) {
								$wordcounter=$wordcounter+($#words - $wn);
								$ln++; @words = make_words($lines[$ln]); $wn=0;
							}
							$current_word = $words[$wn];
							$next_word_time += word_time($current_word);
							$lettercounter += length($current_word);
						}
						$current_orp = find_ORP($current_word, $ORPloc);
					}
					elsif ($ch eq 'q') { exit(130); }
					elsif ($ch eq 'i' or $ch eq '[') {
						print_stats();
						my $resume_word = $ln + $wn/1000;
						say " To resume from this point run with argument -r $resume_word";
						exit(131);
					}
					elsif ($ch eq 'C' or $ch eq ']') { system("clear"); }
				}
				$next_input_time += 0.02; # checking for input 20 times / second seems to give a reasonably responsive UI
			}

			# redrawing the word on each "frame" gives a more responsive UI
			# (we don't have to wait for the word to change to display changed stats like wpm)
			show_word($current_word, $current_orp, $wn, $ln);

			my $sleep_time = ($next_word_time < $next_input_time and !$paused) ? $next_word_time-$current_time : $next_input_time-$current_time;
			sleep($sleep_time) if ($sleep_time > 0);
		}
	}

	print_stats();
	sleep(1);
}


package rawinput;

# An ad-hoc interface to interactive terminal input.  Term::Screen *should*
# have been a natural choice here, unfortunately it is fixated at reading
# from stdin instead of /dev/tty. Tough.

sub new {
	my $class = shift;
	my $self;
	open $self, '/dev/tty';
	bless $self, $class;
	stty('min 1', '-icanon', '-echo');
	return $self;
}

sub DESTROY {
	stty('cooked', 'echo');
}

sub stty {
	my $self = shift;
	eval { system('stty', $^O eq 'darwin' ? '-f' : '-F', '/dev/tty', @_); };
}

sub key_pressed {
	my $self = shift;
	my $readfields = '';
	vec($readfields, fileno($self), 1) = 1;
	my $ready = 0;
	eval { $ready = select($readfields, undef, undef, 0); };
	return $ready;
}

sub getch {
	my $self = shift;
	getc($self);
}
